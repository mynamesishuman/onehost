/*
1Cent.Host API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package onehost

import (
	"encoding/json"
)

// checks if the ServerServerIdReinstallOsIdPost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerServerIdReinstallOsIdPost200Response{}

// ServerServerIdReinstallOsIdPost200Response struct for ServerServerIdReinstallOsIdPost200Response
type ServerServerIdReinstallOsIdPost200Response struct {
	Message *string `json:"message,omitempty"`
	ServerId *int32 `json:"server_id,omitempty"`
	NewOs *string `json:"new_os,omitempty"`
}

// NewServerServerIdReinstallOsIdPost200Response instantiates a new ServerServerIdReinstallOsIdPost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerServerIdReinstallOsIdPost200Response() *ServerServerIdReinstallOsIdPost200Response {
	this := ServerServerIdReinstallOsIdPost200Response{}
	return &this
}

// NewServerServerIdReinstallOsIdPost200ResponseWithDefaults instantiates a new ServerServerIdReinstallOsIdPost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerServerIdReinstallOsIdPost200ResponseWithDefaults() *ServerServerIdReinstallOsIdPost200Response {
	this := ServerServerIdReinstallOsIdPost200Response{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ServerServerIdReinstallOsIdPost200Response) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerServerIdReinstallOsIdPost200Response) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ServerServerIdReinstallOsIdPost200Response) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ServerServerIdReinstallOsIdPost200Response) SetMessage(v string) {
	o.Message = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *ServerServerIdReinstallOsIdPost200Response) GetServerId() int32 {
	if o == nil || IsNil(o.ServerId) {
		var ret int32
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerServerIdReinstallOsIdPost200Response) GetServerIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *ServerServerIdReinstallOsIdPost200Response) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given int32 and assigns it to the ServerId field.
func (o *ServerServerIdReinstallOsIdPost200Response) SetServerId(v int32) {
	o.ServerId = &v
}

// GetNewOs returns the NewOs field value if set, zero value otherwise.
func (o *ServerServerIdReinstallOsIdPost200Response) GetNewOs() string {
	if o == nil || IsNil(o.NewOs) {
		var ret string
		return ret
	}
	return *o.NewOs
}

// GetNewOsOk returns a tuple with the NewOs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerServerIdReinstallOsIdPost200Response) GetNewOsOk() (*string, bool) {
	if o == nil || IsNil(o.NewOs) {
		return nil, false
	}
	return o.NewOs, true
}

// HasNewOs returns a boolean if a field has been set.
func (o *ServerServerIdReinstallOsIdPost200Response) HasNewOs() bool {
	if o != nil && !IsNil(o.NewOs) {
		return true
	}

	return false
}

// SetNewOs gets a reference to the given string and assigns it to the NewOs field.
func (o *ServerServerIdReinstallOsIdPost200Response) SetNewOs(v string) {
	o.NewOs = &v
}

func (o ServerServerIdReinstallOsIdPost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerServerIdReinstallOsIdPost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.ServerId) {
		toSerialize["server_id"] = o.ServerId
	}
	if !IsNil(o.NewOs) {
		toSerialize["new_os"] = o.NewOs
	}
	return toSerialize, nil
}

type NullableServerServerIdReinstallOsIdPost200Response struct {
	value *ServerServerIdReinstallOsIdPost200Response
	isSet bool
}

func (v NullableServerServerIdReinstallOsIdPost200Response) Get() *ServerServerIdReinstallOsIdPost200Response {
	return v.value
}

func (v *NullableServerServerIdReinstallOsIdPost200Response) Set(val *ServerServerIdReinstallOsIdPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableServerServerIdReinstallOsIdPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableServerServerIdReinstallOsIdPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerServerIdReinstallOsIdPost200Response(val *ServerServerIdReinstallOsIdPost200Response) *NullableServerServerIdReinstallOsIdPost200Response {
	return &NullableServerServerIdReinstallOsIdPost200Response{value: val, isSet: true}
}

func (v NullableServerServerIdReinstallOsIdPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerServerIdReinstallOsIdPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


