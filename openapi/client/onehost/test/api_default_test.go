/*
1Cent.Host API

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package onehost

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_onehost_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService ServerLocationConfigurationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var location string

		resp, httpRes, err := apiClient.DefaultAPI.ServerLocationConfigurationsGet(context.Background(), location).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServerLocationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ServerLocationsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServerPurchasePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ServerPurchasePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServerServerIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.DefaultAPI.ServerServerIdGet(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServerServerIdProlongPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.DefaultAPI.ServerServerIdProlongPost(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServerServerIdReinstallOsIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32
		var osId int32

		resp, httpRes, err := apiClient.DefaultAPI.ServerServerIdReinstallOsIdPost(context.Background(), serverId, osId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServerServerIdRestartPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.DefaultAPI.ServerServerIdRestartPost(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServerServerIdStartPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.DefaultAPI.ServerServerIdStartPost(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ServerServerIdStopPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId int32

		resp, httpRes, err := apiClient.DefaultAPI.ServerServerIdStopPost(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UserGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.UserGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UserServersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.UserServersGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
